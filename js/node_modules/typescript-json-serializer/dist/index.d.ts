import 'reflect-metadata';
interface SerializableOptions {
    formatPropertyNames: FormatPropertyNameProto;
}
declare type IOProto = (property: any, currentInstance?: any) => any;
declare type PredicateProto = (property: any, parentProperty?: any) => any;
declare type FormatPropertyNameProto = (propertyName: string) => string;
interface BeforeAfterProto {
    beforeSerialize?: IOProto;
    afterSerialize?: IOProto;
    beforeDeserialize?: IOProto;
    afterDeserialize?: IOProto;
}
declare type BaseMetadata = {
    required?: boolean;
} & BeforeAfterProto;
declare type Args = string | ({
    name?: string;
    type?: Function;
    isDictionary?: boolean;
} & BaseMetadata) | ({
    name?: string;
    predicate?: PredicateProto;
    isDictionary?: boolean;
} & BaseMetadata) | ({
    names: Array<string>;
    type?: Function;
} & BaseMetadata) | ({
    names: Array<string>;
    predicate?: PredicateProto;
} & BaseMetadata);
/**
 * Decorator to take the property in account during the serialize and deserialize function
 *
 * @param {Args=} args Arguments to describe the property
 */
export declare const JsonProperty: (args?: Args) => Function;
/**
 * Decorator to make a class Serializable
 *
 * @param {{formatPropertyNames: FormatPropertyNameProto}=} options The options of the serializable class
 *
 * BREAKING CHANGE: Since version 2.0.0 the parameter `baseClassName` is not needed anymore
 */
export declare const Serializable: (options?: SerializableOptions) => Function;
/**
 * Function to deserialize json into a class
 *
 * @param {object} json The json to deserialize
 * @param {new (...params: Array<any>) => T} type The class in which we want to deserialize
 * @returns {T} The instance of the specified type containing all deserialized properties
 */
export declare const deserialize: <T>(json: any, type: new (...params: Array<any>) => T) => T;
/**
 * Function to serialize a class into json
 *
 * @param {any} instance Instance of the object to deserialize
 * @param {boolean} removeUndefined Indicates if you want to keep or remove undefined values
 * @returns {any} The json object
 */
export declare const serialize: (instance: any, removeUndefined?: boolean) => any;
export {};
